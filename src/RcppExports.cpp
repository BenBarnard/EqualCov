// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// c3
double c3(arma::mat x);
RcppExport SEXP EqualCov_c3(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(c3(x));
    return rcpp_result_gen;
END_RCPP
}
// c2
double c2(arma::mat x);
RcppExport SEXP EqualCov_c2(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(c2(x));
    return rcpp_result_gen;
END_RCPP
}
// c1
double c1(arma::mat x);
RcppExport SEXP EqualCov_c1(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(c1(x));
    return rcpp_result_gen;
END_RCPP
}
// bilinearquad
double bilinearquad(arma::mat x);
RcppExport SEXP EqualCov_bilinearquad(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(bilinearquad(x));
    return rcpp_result_gen;
END_RCPP
}
// bilinearsquare
double bilinearsquare(arma::mat x);
RcppExport SEXP EqualCov_bilinearsquare(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(bilinearsquare(x));
    return rcpp_result_gen;
END_RCPP
}
// bilinearcube
double bilinearcube(arma::mat x);
RcppExport SEXP EqualCov_bilinearcube(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(bilinearcube(x));
    return rcpp_result_gen;
END_RCPP
}
// bilinearoff
double bilinearoff(arma::mat x);
RcppExport SEXP EqualCov_bilinearoff(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(bilinearoff(x));
    return rcpp_result_gen;
END_RCPP
}
// quadra
double quadra(arma::mat x);
RcppExport SEXP EqualCov_quadra(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(quadra(x));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"EqualCov_c3", (DL_FUNC) &EqualCov_c3, 1},
    {"EqualCov_c2", (DL_FUNC) &EqualCov_c2, 1},
    {"EqualCov_c1", (DL_FUNC) &EqualCov_c1, 1},
    {"EqualCov_bilinearquad", (DL_FUNC) &EqualCov_bilinearquad, 1},
    {"EqualCov_bilinearsquare", (DL_FUNC) &EqualCov_bilinearsquare, 1},
    {"EqualCov_bilinearcube", (DL_FUNC) &EqualCov_bilinearcube, 1},
    {"EqualCov_bilinearoff", (DL_FUNC) &EqualCov_bilinearoff, 1},
    {"EqualCov_quadra", (DL_FUNC) &EqualCov_quadra, 1},
    {NULL, NULL, 0}
};

RcppExport void R_init_EqualCov(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
